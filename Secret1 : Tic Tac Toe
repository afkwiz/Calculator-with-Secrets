
import java.awt.Image;
import java.util.Random;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 * Mini(^2)Max: Center, TopLeft, TopRight, BottomLeft, BottomRight, TopCenter, MiddleLeft, MiddleRight, BottomCenter
 */

/**
 *
 * @author iyer8616
 */
public class TicTacToe extends javax.swing.JFrame {

    ImageIcon XX = new ImageIcon(getClass().getResource("/images/somethingrandom/x.png"));
    ImageIcon OO = new ImageIcon(getClass().getResource("/images/somethingrandom/o.png"));
    Image XXX = XX.getImage();
    Image XXXX = XXX.getScaledInstance(103, 63, java.awt.Image.SCALE_SMOOTH);
    ImageIcon X = new ImageIcon(XXXX);
    Image OOO = OO.getImage();
    Image OOOO = OOO.getScaledInstance(103, 63, java.awt.Image.SCALE_SMOOTH);
    ImageIcon O = new ImageIcon(OOOO);
    int turnCounter = 0;
    int playerSelected = 0;
    int gamemode;
    int TopLeftSelected = 0;
    int TopCenterSelected = 0;
    int TopRightSelected = 0;
    int MiddleLeftSelected = 0;
    int CenterSelected = 0;
    int MiddleRightSelected = 0;
    int BottomLeftSelected = 0;
    int BottomCenterSelected = 0;
    int BottomRightSelected = 0;
    int GameWon = 0;
    String winner = "";
    final JFrame parent = new JFrame();
    /**
     * Creates new form TicTacToe 
    */
    public TicTacToe() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        ErrorMessage1 = new javax.swing.JDialog();
        jTextField1 = new javax.swing.JTextField();
        OK = new javax.swing.JButton();
        TopLeft = new javax.swing.JButton();
        TopCenter = new javax.swing.JButton();
        TopRight = new javax.swing.JButton();
        MiddleLeft = new javax.swing.JButton();
        BottomLeft = new javax.swing.JButton();
        Center = new javax.swing.JButton();
        MiddleRight = new javax.swing.JButton();
        BottomCenter = new javax.swing.JButton();
        BottomRight = new javax.swing.JButton();
        TurnCounter = new javax.swing.JTextField();
        xWinCounter = new javax.swing.JTextField();
        oWinCounter = new javax.swing.JTextField();
        GameCounter = new javax.swing.JTextField();
        BackButtonPressed = new javax.swing.JButton();
        PlayerTwoSelect = new javax.swing.JButton();
        PlayerOneSelect = new javax.swing.JButton();

        ErrorMessage1.setMinimumSize(new java.awt.Dimension(188, 89));

        jTextField1.setEditable(false);
        jTextField1.setText("Please select a gamemode!");

        OK.setText("lol k");
        OK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ErrorMessage1Layout = new javax.swing.GroupLayout(ErrorMessage1.getContentPane());
        ErrorMessage1.getContentPane().setLayout(ErrorMessage1Layout);
        ErrorMessage1Layout.setHorizontalGroup(
            ErrorMessage1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ErrorMessage1Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(OK)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ErrorMessage1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        ErrorMessage1Layout.setVerticalGroup(
            ErrorMessage1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ErrorMessage1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(OK))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TopLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TopLeftActionPerformed(evt);
            }
        });

        TopCenter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TopCenterActionPerformed(evt);
            }
        });

        TopRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TopRightActionPerformed(evt);
            }
        });

        MiddleLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MiddleLeftActionPerformed(evt);
            }
        });

        BottomLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BottomLeftActionPerformed(evt);
            }
        });

        Center.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CenterActionPerformed(evt);
            }
        });

        MiddleRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MiddleRightActionPerformed(evt);
            }
        });

        BottomCenter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BottomCenterActionPerformed(evt);
            }
        });

        BottomRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BottomRightActionPerformed(evt);
            }
        });

        TurnCounter.setEditable(false);
        TurnCounter.setText("Turn: 0");
        TurnCounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TurnCounterActionPerformed(evt);
            }
        });

        xWinCounter.setEditable(false);
        xWinCounter.setText("X wins: 0");

        oWinCounter.setEditable(false);
        oWinCounter.setText("O wins: 0");

        GameCounter.setEditable(false);
        GameCounter.setText("Total Games: 0");

        BackButtonPressed.setText("Back");
        BackButtonPressed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonPressedActionPerformed(evt);
            }
        });

        PlayerTwoSelect.setText("2P");
        PlayerTwoSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayerTwoSelectActionPerformed(evt);
            }
        });

        PlayerOneSelect.setText("1P");
        PlayerOneSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayerOneSelectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BottomLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BottomCenter, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BottomRight, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(PlayerTwoSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PlayerOneSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(TurnCounter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(xWinCounter, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(oWinCounter, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(GameCounter, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(BackButtonPressed, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(TopLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(TopCenter, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(TopRight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(MiddleLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(Center, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(MiddleRight, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TopLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TopCenter, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TopRight, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Center, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MiddleLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MiddleRight, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BottomLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BottomCenter, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BottomRight, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(PlayerOneSelect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PlayerTwoSelect)
                        .addGap(26, 26, 26)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(GameCounter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(TurnCounter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(xWinCounter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BackButtonPressed)
                        .addComponent(oWinCounter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void TopLeftActionPerformed(java.awt.event.ActionEvent evt) {                                        
    if (playerSelected != 1){
        ErrorMessage1.setVisible(true);
        this.dispose();     
    } else {
        if (gamemode ==  1){
            if (GameWon != 1){
            if (TopLeftSelected != 1){
                TopLeft.setIcon(X);
                TopLeftSelected = 1;
                turnCounter += 1;
                TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                if (turnCounter == 8){
                    //popup to call a draw if no one has won yet
                } else if (CenterSelected != 1){
                    Center.setIcon(O);
                    CenterSelected = 1;
                    turnCounter += 1;
                    TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (TopRightSelected != 1){
                        TopRight.setIcon(O);
                        TopRightSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (BottomLeftSelected != 1){
                        BottomLeft.setIcon(O);
                        BottomLeftSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (BottomRightSelected != 1){
                        BottomRight.setIcon(O);
                        BottomRightSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (TopCenterSelected != 1){
                        TopCenter.setIcon(O);
                        TopCenterSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (MiddleLeftSelected != 1){
                        MiddleLeft.setIcon(O);
                        MiddleLeftSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (MiddleRightSelected != 1){
                        MiddleRight.setIcon(O);
                        MiddleRightSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (BottomCenterSelected != 1){
                        BottomCenter.setIcon(O);
                        BottomCenterSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter)); 
                    }
            }
        }
    } else if (gamemode == 2){
        if (GameWon != 1 && TopLeftSelected != 1){
            TopLeftSelected = 1;
            if (turnCounter == 0 || turnCounter == 2 || turnCounter == 4 || turnCounter == 6 || turnCounter == 8){
            TopLeft.setIcon(X);  
            turnCounter += 1;
            TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
            } else if (turnCounter == 1 || turnCounter == 3 || turnCounter == 5 || turnCounter == 7 || turnCounter == 9){
            TopLeft.setIcon(O);
            turnCounter += 1;
            TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
            }
        }
    }
    }
    checkWin();
    if (turnCounter == 8 && GameWon == 1){
        //draw...
    }
    }                                       

    private void TopCenterActionPerformed(java.awt.event.ActionEvent evt) {                                          
    if (playerSelected != 1){
        ErrorMessage1.setVisible(true);
        this.dispose();     
    } else {
        if (gamemode ==  1){
            if (GameWon != 1){
            if (TopCenterSelected != 1){
                TopCenter.setIcon(X);
                TopCenterSelected = 1;
                turnCounter += 1;
                TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                if (turnCounter == 8){
                    //popup to call a draw if no one has won yet
                }
                else if (CenterSelected != 1){
                    Center.setIcon(O);
                    CenterSelected = 1;
                    turnCounter += 1;
                    TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                } else if (TopLeftSelected != 1){
                        TopLeft.setIcon(O);
                        TopLeftSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (TopRightSelected != 1){
                        TopRight.setIcon(O);
                        TopRightSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (BottomLeftSelected != 1){
                        BottomLeft.setIcon(O);
                        BottomLeftSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (BottomRightSelected != 1){
                        BottomRight.setIcon(O);
                        BottomRightSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (MiddleLeftSelected != 1){
                        MiddleLeft.setIcon(O);
                        MiddleLeftSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (MiddleRightSelected != 1){
                        MiddleRight.setIcon(O);
                        MiddleRightSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (BottomCenterSelected != 1){
                        BottomCenter.setIcon(O);
                        BottomCenterSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    }
            }
        }
    } else if (gamemode == 2){
        if (GameWon != 1 && TopCenterSelected != 1){
            TopCenterSelected = 1;
            if (turnCounter == 0 || turnCounter == 2 || turnCounter == 4 || turnCounter == 6 || turnCounter == 8){
            TopCenter.setIcon(X);   
            turnCounter += 1;
            TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
            } else if (turnCounter == 1 || turnCounter == 3 || turnCounter == 5 || turnCounter == 7 || turnCounter == 9){
            TopCenter.setIcon(O);
            turnCounter += 1;
            TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
            }
        }
    }
    }
    checkWin();
    }                                         

    private void TopRightActionPerformed(java.awt.event.ActionEvent evt) {                                         
    if (playerSelected != 1){
        ErrorMessage1.setVisible(true);
        this.dispose();     
    } else {
        if (gamemode ==  1){
            if (GameWon != 1){
            if (TopRightSelected != 1){
                TopRight.setIcon(X);
                TopRightSelected = 1;
                turnCounter += 2;
                TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                if (turnCounter == 8){
                    //popup to call a draw if no one has won yet
                }
                else if (CenterSelected != 1){
                    Center.setIcon(O);
                    CenterSelected = 1;
                } else if (TopLeftSelected != 1){
                        TopLeft.setIcon(O);
                        TopLeftSelected = 1;
                    } else if (BottomLeftSelected != 1){
                        BottomLeft.setIcon(O);
                        BottomLeftSelected = 1;
                    } else if (BottomRightSelected != 1){
                        BottomRight.setIcon(O);
                        BottomRightSelected = 1;
                    } else if (TopCenterSelected != 1){
                        TopCenter.setIcon(O);
                        TopCenterSelected = 1;
                    } else if (MiddleLeftSelected != 1){
                        MiddleLeft.setIcon(O);
                        MiddleLeftSelected = 1;
                    } else if (MiddleRightSelected != 1){
                        MiddleRight.setIcon(O);
                        MiddleRightSelected = 1;
                    } else if (BottomCenterSelected != 1){
                        BottomCenter.setIcon(O);
                        BottomCenterSelected = 1;
                    }
            }
        }
    } else if (gamemode == 2){
        if (GameWon != 1 && TopRightSelected != 1){
            TopRightSelected = 1;
            if (turnCounter == 0 || turnCounter == 2 || turnCounter == 4 || turnCounter == 6 || turnCounter == 8){
            TopRight.setIcon(X);   
            turnCounter += 1;
            TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
            } else if (turnCounter == 1 || turnCounter == 3 || turnCounter == 5 || turnCounter == 7 || turnCounter == 9){
            TopRight.setIcon(O);
            turnCounter += 1;
            TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
            }
        }
    }
    }
    checkWin();
    }                                        

    private void MiddleLeftActionPerformed(java.awt.event.ActionEvent evt) {                                           
if (playerSelected != 1){
        ErrorMessage1.setVisible(true);
        this.dispose();     
    } else {
        if (gamemode ==  1){
            if (GameWon != 1){
            if (MiddleLeftSelected != 1){
                MiddleLeft.setIcon(X);
                MiddleLeftSelected = 1;
                turnCounter += 1;
                TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                if (turnCounter == 8){
                    //popup to call a draw if no one has won yet
                }
                else if (CenterSelected != 1){
                    Center.setIcon(O);
                    CenterSelected = 1;
                } else if (TopLeftSelected != 1){
                        TopLeft.setIcon(O);
                        TopLeftSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (TopRightSelected != 1){
                        TopRight.setIcon(O);
                        TopRightSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (BottomLeftSelected != 1){
                        BottomLeft.setIcon(O);
                        BottomLeftSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (BottomRightSelected != 1){
                        BottomRight.setIcon(O);
                        BottomRightSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (MiddleLeftSelected != 1){
                        MiddleLeft.setIcon(O);
                        MiddleLeftSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (MiddleRightSelected != 1){
                        MiddleRight.setIcon(O);
                        MiddleRightSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (BottomCenterSelected != 1){
                        BottomCenter.setIcon(O);
                        BottomCenterSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    }
            }
        }
    } else if (gamemode == 2){
        if (GameWon != 1 && MiddleLeftSelected != 1){
            MiddleLeftSelected = 1;
            if (turnCounter == 0 || turnCounter == 2 || turnCounter == 4 || turnCounter == 6 || turnCounter == 8){
            MiddleLeft.setIcon(X); 
            turnCounter += 1;
            TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
            } else if (turnCounter == 1 || turnCounter == 3 || turnCounter == 5 || turnCounter == 7 || turnCounter == 9){
            MiddleLeft.setIcon(O);
            turnCounter += 1;
            TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
            }
        }
    }
    }
    checkWin();
    }                                          

    private void CenterActionPerformed(java.awt.event.ActionEvent evt) {                                       
    if (playerSelected != 1){
        ErrorMessage1.setVisible(true);
        this.dispose();     
    } else {
        if (gamemode ==  1){
            if (GameWon != 1){
            if (CenterSelected != 1){
                Center.setIcon(X);
                CenterSelected = 1;
                turnCounter += 1;
                TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                if (turnCounter == 8){
                    //popup to call a draw if no one has won yet
                } else if (TopLeftSelected != 1){
                        TopLeft.setIcon(O);
                        TopLeftSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (TopRightSelected != 1){
                        TopRight.setIcon(O);
                        TopRightSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (BottomLeftSelected != 1){
                        BottomLeft.setIcon(O);
                        BottomLeftSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (BottomRightSelected != 1){
                        BottomRight.setIcon(O);
                        BottomRightSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (TopCenterSelected != 1){
                        TopCenter.setIcon(O);
                        TopCenterSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (MiddleLeftSelected != 1){
                        MiddleLeft.setIcon(O);
                        MiddleLeftSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (MiddleRightSelected != 1){
                        MiddleRight.setIcon(O);
                        MiddleRightSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (BottomCenterSelected != 1){
                        BottomCenter.setIcon(O);
                        BottomCenterSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    }
            }
        }
    } else if (gamemode == 2){
        if (GameWon != 1 && CenterSelected != 1){
            CenterSelected = 1;
            if (turnCounter == 0 || turnCounter == 2 || turnCounter == 4 || turnCounter == 6 || turnCounter == 8){
            Center.setIcon(X);   
            turnCounter += 1;
            TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
            } else if (turnCounter == 1 || turnCounter == 3 || turnCounter == 5 || turnCounter == 7 || turnCounter == 9){
            Center.setIcon(O);
            turnCounter += 1;
            TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
            }
        }
    }
    }
    checkWin();
    }                                      

    private void MiddleRightActionPerformed(java.awt.event.ActionEvent evt) {                                            
    if (playerSelected != 1){
        ErrorMessage1.setVisible(true);
        this.dispose();     
    } else {
        if (gamemode ==  1){
            if (GameWon != 1){
            if (MiddleRightSelected != 1){
                MiddleRight.setIcon(X);
                MiddleRightSelected = 1;
                turnCounter += 1;
                TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                if (turnCounter == 8){
                    //popup to call a draw if no one has won yet
                } else if (CenterSelected != 1){
                    Center.setIcon(O);
                    CenterSelected = 1;
                    turnCounter += 1;
                    TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                } else if (TopLeftSelected != 1){
                        TopLeft.setIcon(O);
                        TopLeftSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (TopRightSelected != 1){
                        TopRight.setIcon(O);
                        TopRightSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (BottomLeftSelected != 1){
                        BottomLeft.setIcon(O);
                        BottomLeftSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (BottomRightSelected != 1){
                        BottomRight.setIcon(O);
                        BottomRightSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (TopCenterSelected != 1){
                        TopCenter.setIcon(O);
                        TopCenterSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (MiddleLeftSelected != 1){
                        MiddleLeft.setIcon(O);
                        MiddleLeftSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (BottomCenterSelected != 1){
                        BottomCenter.setIcon(O);
                        BottomCenterSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    }
            }
        }
    } else if (gamemode == 2){
        if (GameWon != 1 && MiddleRightSelected != 1){
            MiddleRightSelected = 1;
            if (turnCounter == 0 || turnCounter == 2 || turnCounter == 4 || turnCounter == 6 || turnCounter == 8){
            MiddleRight.setIcon(X);   
            turnCounter += 1;
            TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
            } else if (turnCounter == 1 || turnCounter == 3 || turnCounter == 5 || turnCounter == 7 || turnCounter == 9){
            MiddleRight.setIcon(O);
            turnCounter += 1;
            TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
            }
        }
    }
    }
    checkWin();
    }                                           

    private void BottomLeftActionPerformed(java.awt.event.ActionEvent evt) {                                           
    if (playerSelected != 1){
        ErrorMessage1.setVisible(true);
        this.dispose();     
    } else {
        if (gamemode ==  1){
            if (GameWon != 1){
            if (BottomLeftSelected != 1){
                BottomLeft.setIcon(X);
                BottomLeftSelected = 1;
                turnCounter += 1;
                TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                if (turnCounter == 8){
                    //popup to call a draw if no one has won yet
                } else if (CenterSelected != 1){
                    Center.setIcon(O);
                    CenterSelected = 1;
                    turnCounter += 1;
                    TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                } else if (TopLeftSelected != 1){
                        TopLeft.setIcon(O);
                        TopLeftSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (TopRightSelected != 1){
                        TopRight.setIcon(O);
                        TopRightSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (BottomRightSelected != 1){
                        BottomRight.setIcon(O);
                        BottomRightSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (TopCenterSelected != 1){
                        TopCenter.setIcon(O);
                        TopCenterSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (MiddleLeftSelected != 1){
                        MiddleLeft.setIcon(O);
                        MiddleLeftSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (MiddleRightSelected != 1){
                        MiddleRight.setIcon(O);
                        MiddleRightSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (BottomCenterSelected != 1){
                        BottomCenter.setIcon(O);
                        BottomCenterSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    }
            }
        }
    } else if (gamemode == 2){
        if (GameWon != 1 && BottomLeftSelected != 1){
            BottomLeftSelected = 1;
            if (turnCounter == 0 || turnCounter == 2 || turnCounter == 4 || turnCounter == 6 || turnCounter == 8){
            BottomLeft.setIcon(X);   
            turnCounter += 1;
            TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
            } else if (turnCounter == 1 || turnCounter == 3 || turnCounter == 5 || turnCounter == 7 || turnCounter == 9){
            BottomLeft.setIcon(O);
            turnCounter += 1;
            TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
            }
        }
    }
    }
    checkWin();
    }                                          

    private void BottomCenterActionPerformed(java.awt.event.ActionEvent evt) {                                             
    if (playerSelected != 1){
        ErrorMessage1.setVisible(true);
        this.dispose();     
    } else {
        if (gamemode ==  1){
            if (GameWon != 1){
            if (BottomCenterSelected != 1){
                BottomCenter.setIcon(X);
                BottomCenterSelected = 1;
                turnCounter += 1;
                TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                if (turnCounter == 8){
                } else if (CenterSelected != 1){
                    Center.setIcon(O);
                    CenterSelected = 1;
                    turnCounter += 1;
                    TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                } else if (TopLeftSelected != 1){
                        TopLeft.setIcon(O);
                        TopLeftSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (TopRightSelected != 1){
                        TopRight.setIcon(O);
                        TopRightSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (BottomLeftSelected != 1){
                        BottomLeft.setIcon(O);
                        BottomLeftSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (BottomRightSelected != 1){
                        BottomRight.setIcon(O);
                        BottomRightSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (TopCenterSelected != 1){
                        TopCenter.setIcon(O);
                        TopCenterSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (MiddleLeftSelected != 1){
                        MiddleLeft.setIcon(O);
                        MiddleLeftSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (MiddleRightSelected != 1){
                        MiddleRight.setIcon(O);
                        MiddleRightSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (BottomCenterSelected != 1){
                        BottomCenter.setIcon(O);
                        BottomCenterSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    }
            }
        }
    } else if (gamemode == 2){
        if (GameWon != 1 && BottomCenterSelected != 1){
            BottomCenterSelected = 1;
            if (turnCounter == 0 || turnCounter == 2 || turnCounter == 4 || turnCounter == 6 || turnCounter == 8){
            BottomCenter.setIcon(X);   
            turnCounter += 1;
            TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
            } else if (turnCounter == 1 || turnCounter == 3 || turnCounter == 5 || turnCounter == 7 || turnCounter == 9){
            BottomCenter.setIcon(O);
            turnCounter += 1;
            TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
            }
        }
    }
    }
    checkWin();
    }                                            

    private void BottomRightActionPerformed(java.awt.event.ActionEvent evt) {                                            
    if (playerSelected != 1){
        ErrorMessage1.setVisible(true);
        this.dispose();     
    } else {
        if (gamemode ==  1){
            if (GameWon != 1){
            if (BottomRightSelected != 1){
                BottomRight.setIcon(X);
                BottomRightSelected = 1;
                turnCounter += 1;
                TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                if (turnCounter == 8){
                    //popup to call a draw if no one has won yet
                } else if (CenterSelected != 1){
                    Center.setIcon(O);
                    CenterSelected = 1;
                    turnCounter += 1;
                    TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                } else if (TopLeftSelected != 1){
                        TopLeft.setIcon(O);
                        TopLeftSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (TopRightSelected != 1){
                        TopRight.setIcon(O);
                        TopRightSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (BottomLeftSelected != 1){
                        BottomLeft.setIcon(O);
                        BottomLeftSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (TopCenterSelected != 1){
                        TopCenter.setIcon(O);
                        TopCenterSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (MiddleLeftSelected != 1){
                        MiddleLeft.setIcon(O);
                        MiddleLeftSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (MiddleRightSelected != 1){
                        MiddleRight.setIcon(O);
                        MiddleRightSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    } else if (BottomCenterSelected != 1){
                        BottomCenter.setIcon(O);
                        BottomCenterSelected = 1;
                        turnCounter += 1;
                        TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
                    }
            }
        }
    } else if (gamemode == 2){
        if (GameWon != 1 && BottomRightSelected != 1){
            BottomRightSelected = 1;
            if (turnCounter == 0 || turnCounter == 2 || turnCounter == 4 || turnCounter == 6 || turnCounter == 8){
            BottomRight.setIcon(X); 
            turnCounter += 1;
            TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
            } else if (turnCounter == 1 || turnCounter == 3 || turnCounter == 5 || turnCounter == 7 || turnCounter == 9){
            BottomRight.setIcon(O);
            turnCounter += 1;
            TurnCounter.setText("Turn: " + String.valueOf(turnCounter));
            }
        }
    }
    }
    checkWin();
    }                                           

    private void BackButtonPressedActionPerformed(java.awt.event.ActionEvent evt) {                                                  
    new QuadraticSolver().setVisible(true);
    this.dispose();
    }                                                 

    private void PlayerOneSelectActionPerformed(java.awt.event.ActionEvent evt) {                                                
    playerSelected = 1;
    gamemode = 1;
    }                                               

    private void PlayerTwoSelectActionPerformed(java.awt.event.ActionEvent evt) {                                                
    playerSelected = 1;
    gamemode = 2;
    }                                               

    private void OKActionPerformed(java.awt.event.ActionEvent evt) {                                   
    ErrorMessage1.dispose();
    new TicTacToe().setVisible(true);
    }                                  

    private void TurnCounterActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TicTacToe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TicTacToe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TicTacToe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TicTacToe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TicTacToe().setVisible(true);
            }
        });
    }

public void checkWin ()
    {
        // Vertical Cases for X
        //LeftColumn
        if(TopLeft.getIcon() == X && MiddleLeft.getIcon() == X  && BottomLeft.getIcon() == X)
        {
            winner = "X";
            doWin();
        }
        //MiddleColumn
        if(TopCenter.getIcon() == X && Center.getIcon() == X && BottomCenter.getIcon() == X)
        {
            winner = "X";
            doWin();
        }
        //RightColumn
        if(TopRight.getIcon() == X && MiddleRight.getIcon() == X && BottomRight.getIcon() == X)
        {
            winner = "X";
            doWin();
        }
        
        // Horizontal Cases for X
        //MiddleRow
        if (MiddleLeft.getIcon() == X && Center.getIcon() == X && MiddleRight.getIcon() == X)
        {
            winner = "X";
            doWin();
        }
        //TopRow
        if (TopLeft.getIcon() == X && TopCenter.getIcon() == X && TopRight.getIcon() == X)
        {
            winner = "X";
            doWin();
        }
        //BottomRow
        if (BottomLeft.getIcon() == X && BottomCenter.getIcon() == X && BottomRight.getIcon() == X)
        {
            winner = "X";
            doWin();
        }
        
        // Diagonal Cases for X
        if(TopLeft.getIcon() == X && Center.getIcon() == X && BottomRight.getIcon() == X)
        {
            winner = "X";
            doWin();
        }
        if(TopRight.getIcon() == X && Center.getIcon() == X && BottomLeft.getIcon() == X)
        {
            winner = "X";
            doWin();
        }
        
        // Vertical Cases for O
        //LeftColumn
        if(TopLeft.getIcon() == O && MiddleLeft.getIcon() == O && BottomLeft.getIcon() == O)
        {
            winner = "O";
            doWin();
        }
        //MiddleColumn
        if(TopCenter.getIcon() == O && Center.getIcon() == O && BottomCenter.getIcon() == O)
        {
            winner = "O";
            doWin();
        }
        //RightColumn
        if(TopRight.getIcon() == O && MiddleRight.getIcon() == O && BottomRight.getIcon() == O)
        {
            winner = "O";
            doWin();
        }
        
        // Horizontal Cases for O
        //TopRow
        if(TopLeft.getIcon() == O && TopCenter.getIcon() == O && TopRight.getIcon() == O)
        {
            winner = "O";
            doWin();
        }
        //MiddleRow
        if(MiddleLeft.getIcon() == O && Center.getIcon() == O && MiddleRight.getIcon() == O)
        {
            winner = "O";
            doWin();
        }
        //BottomRow
        if(BottomLeft.getIcon() == O && BottomCenter.getIcon() == O && BottomRight.getIcon() == O)
        {
            winner = "O";
            doWin();
        }
        
        // Diagonal Cases for O
        if(TopLeft.getIcon() == O && Center.getIcon() == O && BottomRight.getIcon() == O)
        {
            winner = "O";
            doWin();
        }
        if(TopRight.getIcon() == O && Center.getIcon() == O && BottomLeft.getIcon() == O)
        {
            winner = "O";
            doWin();
        }
    }
    public void doWin()
    {
        GameWon = 1;
   Object[] options = {"Play again",
                    "Stop playing"};
int n = JOptionPane.showOptionDialog(null,
    winner + " wins! \n Play again?",
    winner + " wins!",
    JOptionPane.YES_NO_CANCEL_OPTION,
    JOptionPane.QUESTION_MESSAGE,
    null,
    options,
    options[1]);
if (n==0)
{
    this.dispose();
    new TicTacToe().setVisible(true);
}
if (n==1)
{
    //just refreshes the window
    this.dispose();
    new QuadraticSolver().setVisible(true);
}
    }


    // Variables declaration - do not modify                     
    private javax.swing.JButton BackButtonPressed;
    private javax.swing.JButton BottomCenter;
    private javax.swing.JButton BottomLeft;
    private javax.swing.JButton BottomRight;
    private javax.swing.JButton Center;
    private javax.swing.JDialog ErrorMessage1;
    private javax.swing.JTextField GameCounter;
    private javax.swing.JButton MiddleLeft;
    private javax.swing.JButton MiddleRight;
    private javax.swing.JButton OK;
    private javax.swing.JButton PlayerOneSelect;
    private javax.swing.JButton PlayerTwoSelect;
    private javax.swing.JButton TopCenter;
    private javax.swing.JButton TopLeft;
    private javax.swing.JButton TopRight;
    private javax.swing.JTextField TurnCounter;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField oWinCounter;
    private javax.swing.JTextField xWinCounter;
    // End of variables declaration                   
}
